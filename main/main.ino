#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "AE_SHT31.h"
#include <PanasonicHeatpumpIR.h>
#include <Fonts/FreeSans18pt7b.h>

//ライブラリの入手先
//arduino-heatpumpir  https://github.com/ToniA/arduino-heatpumpir
//SHT31 http://akizukidenshi.com/download/AE_SHT31.zip
//Adafruit_SSD1306 https://github.com/adafruit/Adafruit_SSD1306
//Adafruit-GFX-Library https://github.com/adafruit/Adafruit-GFX-Library


//宣言
void door_buzzer();
void air_cool_on(int target_temp);
void air_cool_off();
void get_env_info();
void wbgt_check();
void emergency();
void heatstroke_alert();
void soracom_send_single();
void soracom_send_double();
void soracom_send_long();
void OLED_display();

//ピン設定
const int buzzer_pin = 9;
const int emergency_button = 10;
const int soracom_signal_pin = 8;
const int door_sensor_pin = 12;

AE_SHT31 SHT31 = AE_SHT31(0x45);
Adafruit_SSD1306 display(128, 64, &Wire, -1);

IRSenderPWM irSender(3);
PanasonicDKEHeatpumpIR *heatpumpIR;


void setup() {
  // シリアル通信を9600bpsに設定
  Serial.begin(9600);
  // シリアルに文字を出力
  Serial.println("SHT31 Test!!");
  // SHT31をソフトリセット
  SHT31.SoftReset();
  // 内蔵ヒーター 0:OFF 1:ON
  SHT31.Heater(0);

  pinMode(emergency_button,INPUT_PULLUP);
  pinMode(door_sensor_pin,INPUT_PULLUP);
  pinMode(soracom_signal_pin, OUTPUT);
  
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.setTextColor(SSD1306_WHITE);
  display.clearDisplay();

  tone(buzzer_pin,523,300);
  delay(300);
  
}

//変数
float temp,humi,wbgt;
unsigned long open_start_time;
unsigned long last_heatalert_time = 0;
unsigned long day_elapsed_time = 0;
boolean door_recorded = false;
int door_elapsed_time = 0;
int b4_elapsed_time = 100;
int buzzer_status = 0;
int door_count = 0;

#define BUZZER_LEN 200 //開閉中のブザーの長さ

//http://javl.github.io/image2cpp/を用いて生成
// '秒'のグラフィック表示, 29x29px
const unsigned char byo_Bitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0xf0, 0x18, 0x00, 
  0x07, 0xc0, 0x18, 0x00, 0x1f, 0x00, 0x18, 0x00, 0x03, 0x01, 0x18, 0x00, 0x03, 0x01, 0xd9, 0x00, 
  0x03, 0x01, 0x98, 0x80, 0x03, 0x31, 0x18, 0xc0, 0x3f, 0xf3, 0x18, 0x60, 0x03, 0x03, 0x18, 0x60, 
  0x03, 0x02, 0x18, 0x70, 0x03, 0x06, 0x18, 0x20, 0x07, 0xc4, 0x18, 0x00, 0x07, 0x64, 0x18, 0x80, 
  0x07, 0x30, 0x19, 0xc0, 0x0b, 0x30, 0x19, 0x80, 0x0b, 0x10, 0x7b, 0x00, 0x13, 0x00, 0x26, 0x00, 
  0x13, 0x00, 0x0e, 0x00, 0x23, 0x00, 0x1c, 0x00, 0x03, 0x00, 0x38, 0x00, 0x03, 0x00, 0x60, 0x00, 
  0x03, 0x00, 0xc0, 0x00, 0x03, 0x03, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00
};

// '通報完了画面', 128x64px
const unsigned char emergency_Bitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xf8, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xf8, 0x00, 0x3f, 0xfc, 0xff, 0xc0, 0x00, 0x00, 0x18, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x1e, 0x00, 0x00, 0x1f, 0xfc, 0x02, 0xf0, 0x00, 0x00, 0x0c, 0x31, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x3f, 0x80, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x04, 0x1b, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xc1, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x06, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x07, 0xc7, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x84, 0x60, 0x00, 0x00, 
  0x00, 0x0f, 0xcc, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x84, 0x60, 0x00, 0x00, 
  0x00, 0x1f, 0xd8, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x1f, 0xf0, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 0x1c, 0x84, 0x60, 0x00, 0x00, 
  0x00, 0x3e, 0x20, 0x0c, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x18, 0x00, 0x04, 0x84, 0x60, 0x00, 0x00, 
  0x00, 0x20, 0x40, 0x1f, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x40, 0x40, 0xec, 0x03, 0x80, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x84, 0x60, 0x00, 0x00, 
  0x00, 0x40, 0x87, 0xc0, 0x7d, 0xc0, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x84, 0x60, 0x00, 0x00, 
  0x00, 0xc0, 0xfc, 0x07, 0xb0, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x84, 0x60, 0x00, 0x00, 
  0x00, 0x80, 0xe0, 0x78, 0x30, 0x60, 0x00, 0x00, 0x00, 0x01, 0x80, 0x0e, 0x85, 0xc0, 0x00, 0x00, 
  0x00, 0x80, 0x87, 0x20, 0x70, 0x60, 0x3f, 0xff, 0x83, 0xff, 0xc0, 0x1b, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x80, 0xff, 0x38, 0x60, 0x70, 0x7f, 0xff, 0xc0, 0x0e, 0xc0, 0x11, 0xff, 0xe0, 0x00, 0x00, 
  0x01, 0x80, 0x7e, 0x1c, 0xc0, 0x30, 0x7f, 0xff, 0xf0, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0x80, 0x7c, 0x0c, 0x00, 0x70, 0x7f, 0xff, 0xf8, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0x80, 0x78, 0x00, 0x30, 0xf0, 0x7f, 0xff, 0xfe, 0x00, 0x30, 0x02, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0x00, 0x78, 0x18, 0x30, 0xf0, 0x7f, 0xff, 0xff, 0x00, 0x18, 0x02, 0x1f, 0xe0, 0x00, 0x00, 
  0x01, 0x3f, 0xf0, 0x18, 0x01, 0xf0, 0x3f, 0x01, 0xff, 0xc0, 0x08, 0x02, 0x18, 0x60, 0x0c, 0x00, 
  0x01, 0x3f, 0x30, 0x00, 0xc1, 0xf0, 0x3f, 0x00, 0x3f, 0xf0, 0x0c, 0x1f, 0xd8, 0x60, 0x0c, 0x00, 
  0x01, 0x3f, 0x38, 0x00, 0x01, 0xe0, 0x3f, 0x00, 0x3f, 0xf8, 0x04, 0x02, 0x18, 0x67, 0xff, 0xf8, 
  0x03, 0x3f, 0x38, 0x00, 0x01, 0xe0, 0x3f, 0x00, 0x0f, 0xfe, 0x06, 0x02, 0x1b, 0xc6, 0x00, 0x18, 
  0x02, 0x3f, 0x18, 0x00, 0x01, 0xe0, 0x1f, 0x00, 0x03, 0xff, 0x02, 0x1f, 0xf8, 0x06, 0x00, 0x18, 
  0x02, 0x3f, 0x1c, 0x00, 0x30, 0xf0, 0x1f, 0x00, 0x00, 0x7f, 0xc2, 0x08, 0x9f, 0xc6, 0x00, 0x18, 
  0x02, 0x3f, 0xcc, 0x03, 0xf0, 0xf0, 0x1f, 0x00, 0x00, 0x01, 0xe0, 0x0c, 0x9c, 0x60, 0xff, 0xc0, 
  0x02, 0x3f, 0xc6, 0x01, 0xe0, 0x78, 0x1e, 0x00, 0x00, 0x00, 0x19, 0x04, 0x9c, 0x40, 0x00, 0x00, 
  0x02, 0x3f, 0xc2, 0x00, 0x00, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xfa, 0x40, 0x00, 0x00, 
  0x02, 0x3f, 0xc0, 0x00, 0x00, 0x08, 0x0f, 0x00, 0x00, 0x00, 0x3f, 0x02, 0x1a, 0xc7, 0xff, 0xf8, 
  0x02, 0x7f, 0xe0, 0x00, 0x01, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x02, 0x1b, 0x80, 0x22, 0x00, 
  0x02, 0x7f, 0xe0, 0xf8, 0x0b, 0x03, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xd9, 0x80, 0x22, 0x00, 
  0x02, 0x7f, 0xe0, 0x00, 0x02, 0x01, 0x07, 0xff, 0xff, 0xff, 0xff, 0x82, 0x19, 0x80, 0x22, 0x00, 
  0x00, 0x7f, 0xe0, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1b, 0xc0, 0x62, 0x08, 
  0x02, 0x7f, 0xe0, 0x40, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1e, 0x60, 0xc2, 0x08, 
  0x02, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x01, 0x7f, 0x82, 0x1c, 0x21, 0x82, 0x08, 
  0x02, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x07, 0x03, 0xf8, 
  0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 
  0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x06, 0x00, 0x01, 0x78, 0x00, 0x00, 0x03, 0xc0, 0x1f, 0xff, 0x81, 0xc0, 0x00, 0x03, 0xff, 0xf0, 
  0x02, 0x00, 0x01, 0x78, 0x00, 0x00, 0x03, 0xc0, 0x7f, 0x1f, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x30, 
  0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x7f, 0x1f, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x60, 
  0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0xc0, 0xff, 0xff, 0xc1, 0xe0, 0x00, 0x00, 0x00, 0xc0, 
  0x02, 0x00, 0x01, 0x80, 0x00, 0x00, 0x03, 0xd0, 0x3c, 0x07, 0x01, 0xc0, 0x00, 0x00, 0x03, 0x80, 
  0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 
  0x02, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x0c, 0x00, 
  0x02, 0x3f, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x0c, 0x00, 
  0x02, 0x7f, 0x80, 0x40, 0x07, 0x80, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x40, 0x00, 0x00, 0x0c, 0x00, 
  0x01, 0xff, 0xc0, 0x40, 0x3f, 0xc0, 0x00, 0x00, 0x3f, 0x01, 0x87, 0xc0, 0x00, 0x00, 0x0c, 0x00, 
  0x01, 0xff, 0xef, 0xf8, 0x3f, 0xe0, 0x01, 0xff, 0xe0, 0x00, 0xfe, 0xc0, 0x00, 0x00, 0x0c, 0x00, 
  0x01, 0xe3, 0xe1, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xe0, 0x01, 0x80, 0xc0, 0x00, 0x00, 0x0c, 0x00, 
  0x01, 0xe1, 0xe0, 0x30, 0x78, 0xf8, 0x00, 0x00, 0x60, 0x00, 0x03, 0x80, 0x00, 0x00, 0x0c, 0x00, 
  0x01, 0xe1, 0xe0, 0x18, 0x78, 0x78, 0x00, 0x00, 0x60, 0x00, 0xbf, 0x00, 0x00, 0x00, 0x0c, 0x00, 
  0x00, 0xe1, 0xe7, 0xfe, 0x70, 0x78, 0xff, 0xf3, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x0c, 0x00, 
  0x00, 0xf1, 0xe0, 0x00, 0x78, 0x78, 0x7f, 0xff, 0xfb, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7c, 0x00, 
  0x00, 0x7f, 0xe0, 0x00, 0x38, 0xf8, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xc0, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x80, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



void loop() {
  if (digitalRead(emergency_button) == LOW){ //緊急ボタンを押された
  emergency();
  }
  if(digitalRead(door_sensor_pin) == HIGH){ //冷蔵庫の扉が開かれた
    if(door_recorded == false){
      open_start_time = millis(); //冷蔵庫の扉が開かれた時の時刻を記録
      door_recorded = true;
      soracom_send_single(); 
    }else{
      door_elapsed_time = (millis() - open_start_time)/1000;
      if(door_elapsed_time != b4_elapsed_time){      
        display.clearDisplay();
        display.setTextSize(2);
        display.setCursor(0,57);
        display.setFont(&FreeSans18pt7b);
        display.println(door_elapsed_time);
        display.drawBitmap(98, 34, byo_Bitmap, 29, 29, WHITE);//漢字で'秒'を表示
        display.display();
        door_buzzer();
        b4_elapsed_time = door_elapsed_time;
      }
    }
  }else{ //冷蔵庫の扉が開かれていない場合
    if(door_recorded == true){
      if(buzzer_status >= 8){
        noTone(buzzer_pin);
      }
      door_count++;
      door_recorded = false;
      b4_elapsed_time = 100;
      buzzer_status = 0;
    }
    OLED_display();
  }
}

void door_buzzer(){ //扉の開閉時間に応じてドレミファソラシドでお知らせ
  if(door_elapsed_time >= 25 && buzzer_status == 0){ 
    tone(buzzer_pin,262,BUZZER_LEN); // ド
    buzzer_status = 1;
  }
  if(door_elapsed_time >= 30 && buzzer_status == 1){
    tone(buzzer_pin,294,BUZZER_LEN); // レ
    buzzer_status = 2;
  }
  if(door_elapsed_time >= 35 && buzzer_status == 2){
    tone(buzzer_pin,330,BUZZER_LEN); // ミ
    buzzer_status = 3;
  }
  if(door_elapsed_time >= 40 && buzzer_status == 3){
    tone(buzzer_pin,349,BUZZER_LEN); // ファ
    buzzer_status = 4;
  }
  if(door_elapsed_time >= 45 && buzzer_status == 4){
    tone(buzzer_pin,392,BUZZER_LEN); // ソ
    buzzer_status = 5;
  }
  if(door_elapsed_time >= 50 && buzzer_status == 5){
    tone(buzzer_pin,440,BUZZER_LEN); // ラ
    buzzer_status = 6;
  }
  if(door_elapsed_time >= 55 && buzzer_status == 6){
    tone(buzzer_pin,494,BUZZER_LEN); // シ
    buzzer_status = 7;
  }
  if(door_elapsed_time >= 60 && buzzer_status == 7){
    tone(buzzer_pin,523); // ド
    buzzer_status = 8;
  }
  if(door_elapsed_time >= 3600 && buzzer_status == 8){ //1時間も開けっ放しなのは明らかに緊急事態
    emergency();
    buzzer_status = 9;
  }
}

void air_cool_on(int target_temp){ //エアコンON(温度変更)赤外線信号を送信
  heatpumpIR = new PanasonicDKEHeatpumpIR();
  heatpumpIR->send(irSender, POWER_ON, MODE_COOL, FAN_AUTO, target_temp, VDIR_AUTO, HDIR_AUTO);
  delay(600);
  heatpumpIR->send(irSender, POWER_ON, MODE_COOL, FAN_AUTO, target_temp, VDIR_AUTO, HDIR_AUTO);
  last_heatalert_time = millis();
}


void air_cool_off(){ //エアコンOFF赤外線信号を送信
  heatpumpIR = new PanasonicDKEHeatpumpIR();
  heatpumpIR->send(irSender, POWER_OFF, MODE_COOL, FAN_AUTO, 26, VDIR_AUTO, HDIR_AUTO);
  
}

void get_env_info() { //温湿度および推定WBGT値を取得
  SHT31.GetTempHum();
  
  temp = SHT31.Temperature();
  humi = SHT31.Humidity();
  wbgt_check();
}

void wbgt_check(){ //WBGT値を推測
  wbgt = 0.735*temp+0.0374*humi+0.00292*temp*humi-4.064;
  if(((millis() - last_heatalert_time)/1000) >= 1800 || last_heatalert_time==0){ //前回発動から30分が経過して再確認
    if(wbgt>=31){ //WBGT値が危険基準値(31℃以上)に達したらエアコン24℃
      heatstroke_alert(); 
      air_cool_on(24);
    }else if(wbgt>=28){ //WBGT値が厳重警戒値(28℃以上)に達したらエアコン26℃
      air_cool_on(26);
    } 
  }
}

void OLED_display(){ //OLEDディスプレイへの表示を行う
  get_env_info();
  if(((millis()-day_elapsed_time)/1000)>=86400){//24時間経過したら開閉回数リセット
    door_count = 0; 
    day_elapsed_time = millis();
  }
  display.clearDisplay();
  display.setCursor(0,0);
  display.setTextSize(2);
  display.setFont();
  display.print(F("  "));  display.print(temp); display.println(F(" C"));
  display.print(F("  "));  display.print(humi); display.println(F(" %")); 
  display.print(F("WBGT:")); display.println(wbgt); 
  display.print(F("Count: ")); display.println(door_count); 
  display.display();
}

void emergency(){ //緊急ボタン押下時に接点入力へデータ送信
  display.clearDisplay();
  tone(buzzer_pin,1046,6000);
  display.drawBitmap(0, 0, emergency_Bitmap, 128, 64, WHITE);
  display.display();
  soracom_send_long();
}

void heatstroke_alert(){ //熱中症危険時に接点入力へデータ送信
  tone(buzzer_pin,900,3000);
  soracom_send_double();
}

void soracom_send_single(){ //シングルクリック<1>　扉開閉時
  digitalWrite(soracom_signal_pin, HIGH);
  delay(500);
  digitalWrite(soracom_signal_pin, LOW);
}

void soracom_send_double(){ //ダブルクリック<2>　熱中症危険時
  digitalWrite(soracom_signal_pin, HIGH);
  delay(500);
  digitalWrite(soracom_signal_pin, LOW);
  delay(500);
  digitalWrite(soracom_signal_pin, HIGH);
  delay(500);
  digitalWrite(soracom_signal_pin, LOW);
}

void soracom_send_long(){ //長押し入力<3>　緊急ボタン押下時
  digitalWrite(soracom_signal_pin, HIGH);
  delay(1500);
  digitalWrite(soracom_signal_pin, LOW);
  delay(4000);
}
